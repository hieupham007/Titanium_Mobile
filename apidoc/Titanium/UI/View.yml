---
name: Titanium.UI.View
summary: An empty drawing surface or container created by the method <Titanium.UI.createView>.
description: |
    The `View` is the base type for all UI widgets in Titanium.

    
    #### Units and Coordinates
    
    Sizes and coordinates are specified using platform-specific units. 

    The default unit on Android is pixels, but users can specify other units, including 
    pixels (px), points (pt), device-independent pixels (dp or dip), millimeters (mm) or 
    inches (in). For example, '16pt' is interpreted as 16 points. Points on Android always 
    refers to the typographical unit of 1/72 of an inch.
    
    Android's density-independent pixels (DIPs) maintain a consistent visual size independent 
    of the display's density. One DIP corresponds to one pixel on a medium density display 
    (160 DPI).
    
    iOS accepts sizes in Apple "points," where one "point" corresponds to one pixel on 
    non-Retina displays, and two pixels on Retina displays. This unit is roughly equivalent
    to the Android density-independent pixel, and shouldn't be confused with the typographical
    unit. 
    
    Any unit specifier appended to a size or coordinate value on iOS is ignored: for example, 
    '16in' is interpreted as 16 Apple "points", as is '16px' or '16mm'. 

    Font sizes on iOS are treated differently than other sizes: font sizes are always 
    specified in typographical points.
    
    Mobile Web accepts all of the standard web units, including 
    pixels (px), ems (em), points (pt), picas (pc), millimeters (mm) or inches (in). The 
    default unit is pixels. Note that in Mobile Web, the interpretation of these units 
    is browser-dependent.

    Some [View](Titanium.UI.View) size fields, such as `height` and `width` accept the 
    special value `'auto'` to specify that the value should be calculated based on the 
    view's contents. Sizes and positions can also be specified as a percentage of the 
    parent, for example, '50%'.
    
    #### Size and Position
    
    Titanium views are positioned using the `left`, `right`, `top,` `bottom` and `center` 
    properties, and sized using the `width` and `height` properties. These are
    input properties, set by the user to specify layout, and not modified by the 
    system to indicate actual calculated positions and sizes. 
    
    How these properties are interpreted depends on the value of the view's `layout` 
    property. See the description of the [layout](Titanium.UI.View.layout) property 
    for details.
    
    The [size](Titanium.UI.View.size) property is a read-only dictionary with 
    two properties, `width` and `height`. It provides the *rendered* size of the 
    view, and thus is only available once both it and its ancestors have been 
    fully drawn.

extends: Titanium.Proxy
since: "0.9"
methods:
  - name: add
    summary: Adds a child to this view's hierarchy.
    description: |
        There are certain top-level containers that are not intended to be added 
        as the children of other views. These top-level containers include 
        [Window](Titanium.UI.Window), [SplitWindow](Titanium.UI.iPad.SplitWindow),
        and [TabGroup](Titanium.UI.TabGroup).  Other types of views must be added 
        to a top-level container in order to be displayed on screen.

        The special containers [NavigationGroup](Titanium.UI.iPhone.NavigationGroup), 
        [SplitWindow](Titanium.UI.iPad.SplitWindow), [Tab](Titanium.UI.Tab), and 
        [TabGroup](Titanium.UI.TabGroup)
        manage windows. These managed windows may be referred to as *children* of the 
        container, but they are not added using the `add` method.
        
        Note that although a `NavigationGroup`
        manages windows, it is not itself top-level container.  It must be added to a 
        `Window` in order to be displayed. 
        
        `Tab` is another kind of special container: it is not itself a top-level container, 
        but can only be used within a `TabGroup`. You cannot `add` a `Tab` to an arbitrary
        container.
    parameters:
      - name: view
        summary: View to add to this view's hierarchy
        type: Titanium.UI.View
        
  - name: animate
    summary: Animates this view.
    description: |
        The [Animation](Titanium.UI.Animation) object or dictionary passed to this
        method defines the end state for the animation, the duration of the animation,
        and other properties.

        Note that if you use `animate` to move a view, the view's actual *position*
        is changed, but its layout properties, such as `top`, `left`, `center` and 
        so on are not changed--these reflect the original values set by the user, not
        the actual position of the view.
        
        In this release, the view's actual position is not available to the application. 
        This feature will be added to a future release.

        If you need one or more of the layout  properties to be updated after animation,
        you can update them in the callback after animation is complete. For example:

            var newTop = view1.top - 100;
            view1.animate({ top: newTop, duration: 500 }, function () {
                view.top = newTop; 
            });
    parameters:
      - name: obj
        summary: |
            Either a dictionary of animation properties or an 
            [Animation](Titanium.UI.Animation) object.
        type: [Titanium.UI.Animation,Dictionary<Titanium.UI.Animation>]
      - name: callback
        summary: Function to be invoked upon completion of the animation.
        type: Callback<Object>
    
  - name: hide
    summary: Hides this view.
    
  - name: remove
    summary: Removes a child view from this view's hierarchy.
    parameters:
      - name: view
        summary: View to remove from this view's hierarchy.
        type: Titanium.UI.View
    
  - name: show
    summary: Makes this view visible.
    
  - name: toImage
    summary: Returns an image of the rendered view, as a Blob.
    platforms: [android, iphone, ipad]
    returns:
        type: Titanium.Blob
    parameters:
      - name: f
        summary: | 
            Function to be invoked upon completion. If non-null, this method will be 
            performed asynchronously. If null, it will be performed immediately.
        type: Callback<Object>
        optional: true
  - name: convertPointToView
    summary: |
        Translates a point from this view's coordinate system to another 
        view's coordinate system.
    description: |
        If both views are connected in the native view hierarchies, returns the 
        point, converted to `destinationView`'s coordinate system.

        Returns `null` if either view is not in the view hierarchy.
        Keep in mind that views may be removed from the view hierarchy if their window 
        is blurred or if the view is offscreen (such as in some situations with 
        <Titanium.UI.ScrollableView>).

        If this view is a <Titanium.UI.ScrollView>, the view's x and y offsets are 
        subtracted from the return value.
    platforms: [android, iphone, ipad]
    returns:
        type: Point
    parameters:
      - name: point
        summary: |
            A point in this view's coordinate system.  
            If this argument is missing an `x` or `y` property, or the properties can not 
            be converted into numbers, an exception will be raised.
        type: Point
      - name: destinationView
        summary: |
            View that specifies the destination coordinate system to convert to.
            If this argument is not a view, an exception will be raised.
        type: Titanium.UI.View

events:
  - name: click
    summary: Fired when the device detects a click against the view.
    description: |
        There is a subtle difference between singletap and click events.

        A singletap event is generated when the user taps the screen briefly
        without moving their finger. This gesture will also generate a click event.

        However, a click event can also be generated when the user touches, 
        moves their finger, and then removes it from the screen.

        On Android, a click event can also be generated by a trackball click.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        type: Number
        summary: X coordinate of the event, in the `source` view's coordinates.
    
  - name: dblclick
    summary: Fired when the device detects a double click against the view.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        type: Number
        summary: X coordinate of the event, in the `source` view's coordinates.
    
  - name: doubletap
    summary: Fired when the device detects a double tap against the view.
    platforms: [android, iphone, ipad]
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: longclick
    summary: Fired when the device detects a long click.
    description: |
        A long click is generated by the user touching and holding on a touchscreen or,
        in the case of a trackball, holding down the button.  The event occurs before the
        finger/button is lifted up again.  If you have a longclick listener then the click
        event will not occur when you lift the finger/button after a long click.
    platforms: [android]
    
  - name: longpress
    summary: Fired when the device detects a long press.
    description: |
        A long press is generated by the user touching and holding on a touchscreen.
        The event occurs before the finger is lifted again.  Both a `longpress`
        and a `longclick` can occur together.  The differences are that `longclick` 
        can be generated with the trackball whereas `longpress` is a touch-only event, 
        and `longpress` includes `x` and `y` coordinates.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    platforms: [android, iphone, ipad]
    
  - name: pinch
    summary: Fired when the device detects a pinch gesture.
    description: |
        A pinch is a touch and expand or contract 
        with two fingers.  The event occurs continuously until a finger is lifted again.  
    properties:
      - name: scale
        summary: The scale factor relative to the points of the two touches in screen coordinates.
        type: Number
      - name: velocity
        summary: The velocity of the pinch in scale factor per second.
        type: Number
    platforms: [iphone,ipad]
    since: "1.8.0"
    
  - name: singletap
    summary: Fired when the device detects a single tap against the view.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: swipe
    summary: Fired when the device detects a swipe gesture (left or right) against the view.
    platforms: [iphone,ipad,mobileweb]
    properties:
      - name: direction
        summary: Direction of the swipe--either 'left' or 'right'.
        type: String
      - name: y
        summary: Y coordinate of the event's endpoint, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event's endpoint in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event's endpoint, in the `source` view's coordinates.
        type: Number
    
  - name: touchcancel
    summary: Fired when a touch event is interrupted by the device.
    description: |
        A touchcancel can happen in circumstances such as an incoming call to allow the 
        UI to clean up state.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: touchend
    summary: Fired when a touch event is completed.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: touchmove
    summary: Fired as soon as the device detects movement of a touch.
    description: |
        Event coordinates are always relative to the view in which the initial touch occurred
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
    
  - name: twofingertap
    summary: Fired when the device detects a two-finger tap against the view.
    properties:
      - name: y
        summary: Y coordinate of the event, in the `source` view's coordinates.
        type: Number
      - name: globalPoint
        summary: |
            Dictionary with properties `x` and `y` describing the location 
            of the event in screen coordinates.
        platforms: [iphone, ipad]
        deprecated:
            since: "1.8.0"
      - name: x
        summary: X coordinate of the event, in the `source` view's coordinates.
        type: Number
properties:
  - name: anchorPoint
    summary: Anchor point where animation should occur, relative to the view's boundaries. 
    description: |
        Anchor point is specified as a fraction of the view's size. So 
        (0.5,0.5) represents the view's center and (1, 1) is the view's bottom-right 
        corner.
    platforms: [iphone, ipad]
    type: Point
    
  - name: animatedCenterPoint
    summary: Current position of the view during an animation.
    platforms: [android, iphone, ipad]
    type: Point
    permission: read-only
    
  - name: backgroundColor
    summary: Background color of the view.
    type: String
    
  - name: backgroundDisabledColor
    summary: Disabled background color of the view.
    platforms: [android]
    type: String
    
  - name: backgroundDisabledImage
    summary: Disabled background image for the view, specified as a local file path or URL.
    platforms: [android]
    type: String
    
  - name: backgroundFocusedColor
    summary: Focused background color of the view.
    description: For normal views, the focused color is only used if `focusable` is `true`.
    platforms: [android]
    type: String
    
  - name: backgroundFocusedImage
    summary: Focused background image for the view, specified as a local file path or URL.
    description: For normal views, the focused background is only used if `focusable` is `true`.
    platforms: [android]
    type: String
    
  - name: backgroundGradient
    summary: A background gradient for the view.
    type: Gradient
    platforms: [iphone,ipad,mobileweb]
    description: |
        A gradient can be defined as either linear or radial. A linear gradient
        varies continuously along a line between the `startPoint` and `endPoint`.
        A radial gradient is interpolated between two circles, defined by `startPoint`
        and `startRadius` and `endPoint` and `endRadius` respectively.

        The start and end points and radius values can be defined in device units,
        in the view's coordinates, or as percentages of the view's size. Thus, if
        a view is 60 x 60, the center point of the view can be specified as:

            { x: 30, y: 30 }
        Or:
            { x: '50%', y: '50%' }

        When specifying multiple colors, you can specify an *offset* value for
        each color, defining how far into the gradient it takes effect. For example,
        the following color array specifies a gradient that goes from red to blue back to red:

            colors: [ { color: 'red', offset: 0.0}, { color: 'blue', offset: 0.25 }, { color: 'red', offset: 1.0 } ]
    examples:
      - title: Linear and Radial Gradients
        example: |
            The following code excerpt creates two views, one with a linear gradient and one with
            a radial gradient.

                var win1 = Titanium.UI.createWindow({
                    title:'Tab 1',
                    backgroundColor:'#fff',
                    layout: 'vertical'
                });

                var radialGradient = Ti.UI.createView({
                    top: 10,
                    width: 100,
                    height: 100,
                    backgroundGradient: {
                        type: 'radial',
                        startPoint: { x: 50, y: 50 },
                        endPoint: { x: 50, y: 50 },
                        colors: [ 'red', 'blue'],
                        startRadius: '90%',
                        endRadius: 0,
                        backfillStart: true
                    }
                });
                var linearGradient = Ti.UI.createView({
                    top: 10,
                    width: 100,
                    height: 100,
                    backgroundGradient: {
                        type: 'linear',
                        startPoint: { x: '0%', y: '50%' },
                        endPoint: { x: '100%', y: '50%' },
                        colors: [ { color: 'red', offset: 0.0}, { color: 'blue', offset: 0.25 }, { color: 'red', offset: 1.0 } ],
                    }
                });
                win1.add(radialGradient);
                win1.add(linearGradient);
                win1.open();
  - name: backgroundImage
    summary: Background image for the view, specified as a local file path or URL.
    type: String

  - name: backgroundRepeat
    summary: Toggle for whether or not to tile a background across a view.
    description: |
        Setting this to `true` makes the set `backgroundImage` repeat across
        the view as a series of tiles. The tiling is begins in the upper-left
        corner, where the upper-left corner of the background image is rendered.
        The image is then tiled to fill the available space of the view.
        
        Note that setting this to `true` may incur performance penalties for
        large views or background images, as the tiling must be redone
        whenever a view is resized.
        
        The following views do not currently support tiled backgrounds:
        * <Titanium.UI.Button>
        * <Titanium.UI.TextField>
        * <Titanium.UI.Label>
    type: Boolean
    platforms: [iphone, ipad]

  - name: backgroundLeftCap
    summary: Size of the left end cap.
    description: |
        End caps specify the portion of an image that should not be resized when an 
        image is stretched. This technique is used to implement buttons and other 
        resizable image-based interface elements. When a button with end caps is resized, 
        the resizing occurs only in the middle of the button, in the region between the end 
        caps. The end caps themselves keep their original size and appearance. This property 
        specifies the size of the left end cap. The middle (stretchable) portion is assumed to 
        be 1 pixel wide. The right end cap is therefore computed by adding the size of the left 
        end cap and the middle portion together and then subtracting that value from the width 
        of the image
    type: Number
    platforms: [iphone, ipad]
    
  - name: backgroundSelectedColor
    summary: Selected background color of the view.
    description: focusable must be true for normal views.
    platforms: [android, mobileweb]
    type: String
    
  - name: backgroundSelectedImage
    summary: Selected background image url for the view, specified as a local file path or URL.
    description: For normal views, the selected background is only used if `focusable` is `true`.
    platforms: [android, mobileweb]
    type: String
    
  - name: backgroundTopCap
    summary: Size of the top end cap.
    description: |
        End caps specify the portion of an image that should not be resized when an image 
        is stretched. This technique is used to implement buttons and other resizable 
        image-based interface elements. When a button with end caps is resized, the resizing 
        occurs only in the middle of the button, in the region between the end caps. The end 
        caps themselves keep their original size and appearance. This property specifies the 
        size of the top end cap. The middle (stretchable) portion is assumed to be 1 pixel wide. 
        The bottom end cap is therefore computed by adding the size of the top end cap and the
        middle portion together and then subtracting that value from the height of the image.
    type: Number
    platforms: [iphone, ipad]
    
  - name: borderColor
    summary: Border color of the view.
    type: String
    
  - name: borderRadius
    summary: Border radius of the view.
    type: Number
    
  - name: borderWidth
    summary: Border width of the view.
    type: Number
    
  - name: bottom
    summary: View's bottom position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the 
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or 
        a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: [Number,String]
    
  - name: center
    summary: View's center position, in the parent view's coordinates. 
    description: |
        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: Point
    
  - name: children
    summary: Array of this view's child views.
    type: Array<Titanium.UI.View>
    permission: read-only
    
  - name: focusable
    summary: Whether view should be focusable while navigating with the trackball.
    platforms: [android]
    default: false
    type: Boolean
    
  - name: height
    summary: View height, in platform-specific units.
    description: |
        Can be either a float value or a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying the view's height dimension. To determine the view's 
        size once rendered, see the [size](Titanium.UI.View.size) property.
    type: [Number,String]
    
  - name: left
    summary: View's left position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the 
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or 
        a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: [Number,String]
    
  - name: layout
    type: String
    summary: |
        Specifies how the view positions its children. 
        One of: 'absolute', 'vertical', or 'horizontal'.
    description: |
        There are three layout options:

        *   `absolute`. Default layout. A child view's `top`, `bottom`, `left`, and `right` 
            properties are interpreted as absolute values in the parent's coordinate space.

            If the child includes a `top` value and **not** a `bottom` value, the child is 
            positioned `top` units from the top of the parent's bounding box, and its height
            is set based on its `height` property.

            If the child includes a `bottom` value and **not** a `top` value, the child is 
            positioned `bottom` units from the bottom of the parent's bounding box. Its height
            is set based on its `height` property.

            If the child includes both `top` and `bottom` values, the behavior is 
            platform-specific.
             
            Similar calculations are used for `left` and `right`. 

            You can also position a child by setting its `center` property to a <Point>.

            If no position is set explicitly, children are centered. For example, if a 
            child specifies a `top` of 20 and does not specify any other position properties,
            the child is positioned 20 units from the parent's top, and centered horizontally.

         *  `vertical`. Children are laid out vertically from top to bottom. The first child 
            is laid out `top` units from its parent's bounding box. Each subsequent child is 
            laid out below the previous child. The space between children is equal to the 
            upper child's `bottom` value plus the lower child's `top` value.

            Each child is positioned horizontally as for the absolute layout mode.

         *  `horizontal`. Like vertical layout, except children are laid out horizontally
            from left to right, using the `left` and `right` values to determine spacing.

            Each child is positioned vertically as in the absolute layout mode.
    default: absolute layout
    
  - name: opacity
    summary: Opacity of this view, from 0.0 (transparent) to 1.0 (opaque).
    type: Number
    default: 1.0 (opaque)
    
  - name: right
    summary: View's right position, in platform-specific units.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the 
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or 
        a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: [Number,String]
    
  - name: size
    summary: |
        Rendered size of the view as a dictionary of width and height properties.
    description: |
        The correct values will only be available when rendering is fully complete.
    type: Object
    permission: read-only
    
  - name: softKeyboardOnFocus
    summary: Determines keyboard behavior when this view is focused.
    description: |
        One of <Titanium.UI.Android.SOFT_KEYBOARD_DEFAULT_ON_FOCUS>, 
        <Titanium.UI.Android.SOFT_KEYBOARD_HIDE_ON_FOCUS>, or 
        <Titanium.UI.Android.SOFT_KEYBOARD_SHOW_ON_FOCUS>.
    type: Number
    platforms: [android]
    
  - name: top
    summary: The view's top position.
    description: |
        This position is relative to the view's parent. Exact interpretation depends on the 
        parent view's [layout](Titanium.UI.View.layout) property. Can be either a float value or 
        a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying where the view should be positioned, and does not
        represent the view's calculated position.
    type: [Number,String]
    
  - name: touchEnabled
    summary: Whether view should receive touch events.
    description: If false, will forward the events to peers.
    default: true
    type: Boolean
    
  - name: transform
    summary: Transformation matrix to apply to the view.
    description: |
        Android and Mobile Web only support 2DMatrix transforms.
    type: [ Titanium.UI.2DMatrix, Titanium.UI.iOS.3DMatrix ]
    
  - name: visible
    summary: Boolean value indicating whether the view is visible.
    type: Boolean
    
  - name: width
    summary: View's width, in platform-specific units.
    description: |
        Can be either a float value or a dimension string (for example, '50%' or 'auto').

        This is an input property for specifying the view's width dimension. To 
        determine the view's size once rendered, see the 
        [size](Titanium.UI.View.size) property.
    type: [Number,String]
    
  - name: zIndex
    summary: Z index position relative to other sibling views.
    type: Number
    
  - name: keepScreenOn
    summary: Whether to keep the device screen on.
    description: |
        When `true` the screen will not power down. Note: enabling this feature will use more 
        power, thereby adversely affecting run time when on battery.
    type: Boolean
    platforms: [android]
    
examples:
  - title: Round View Example
    example: |
        Create a rounded view.
        
            var view = Titanium.UI.createView({
               borderRadius:10,
               backgroundColor:'red',
               width:50,
               height:50
            });
            window.add(view);
        
        
---
name: Point
summary: A pair of coordinates used to describe the location of a <Titanium.UI.View>.
since: "1.8.0"
platforms: [android, iphone, ipad]
properties:
  - name: x
    type: Number
    summary: The x-axis coordinate of this point.
  - name: y
    type: Number
    summary: The y-axis coordinate of this point.
---
name: Gradient
summary: A simple object defining a color gradient.
since: "1.8.0"
platforms: [iphone, ipad]
properties:
  - name: type
    summary: Type of gradient, either 'linear' or 'radial'.
    type: String
    default: linear
  - name: startPoint
    summary: Start point for the gradient.
    type: Point
  - name: endPoint
    summary: End point for the gradient.
    type: Point
  - name: startRadius
    summary: For a radial gradient, the radius at the `startPoint`.
    type: Number
  - name: endRadius
    summary: For a radial gradient, the radius at the `endPoint`.
    type: Number
  - name: colors
    summary: An array of colors.
    type: [ Array<String>, Array<GradientColorRef> ]
  - name: backfillStart
    summary: Set to `true` to continue filling with the starting color beyond the `startPoint`.
    type: Boolean
    default: false
  - name: backfillEnd
    summary: Set to `true` to continue filling with the final color beyond the `endPoint`.
    type: Boolean
    default: false

---
name: GradientColorRef
summary: A simple object consisting of a color and an offset.
properties:
  - name: color
    summary: Color value at this point in the gradient.
    type: String
  - name: offset
    summary: Offset of this color in the gradient, from 0 (start) to 1 (end).
    type: Number
    
