---
name: Titanium.UI.TableViewRow
summary: An individual row for a [TableView](Titanium.UI.TableView). 
description: |
    Use the <Titanium.UI.createTableViewRow> method to create a table view row.
    
    A table view row represents a single item in a `TableView`. The row's contents can be as simple 
    as a single line of text, or the row can be a completely customized with its own child views.
    
    A basic table view row includes properties for setting:
    
    * Row title to display the text content on the row.
    * Optional images on the left and right sides of the row.
    * Optional system decorations, such as checkboxes.
    
    The usual view properties may also be set, such as background color and background image.
    
    If a custom layout is needed, such as multiple lines of text, different fonts, or additional 
    images or controls, child views may be added to the row. In this case, row `title` property 
    should not be set.
    
    In order to enable good performance, each group of rows with the same layout should be given a 
    `className` of the same value. The content of the elements inside the rows may be different so, 
    for example, if the text is the only thing different between two cells but the layout is the 
    same, both row instances should have the same value for `className`.
    
    As events automatically bubble/propogate to parent views, a listener may be placed on the table 
    view to detect events fired from the rows. The benefit is that it is not necessary to 
    explicitly create a listener for every individual row.
    
    #### Platform Implementation Notes
    
    The `top`, `left` and other positional parameters are not used for their usual purposes, because 
    the table view row is automatically positioned by its parent.
    
    On Android, these properties are used to position the content (title) inside the row. For example, 
    setting `top` to 20 moves the title down from the top of the row.  
    
    On iOS, these values have no effect.
    
    On Mobile Web, they are used to relatively position the row, treating the `TableView` as if it 
    were a horizontal layout.
    
    Also, note that the selected text color, `selectedColor`, can only be set on iOS and 
    Mobile Web. On Android, the text color does not change when the row is selected.
extends: Titanium.UI.View
since: "0.9"
excludes:
    properties: []
    methods: [animate]
    events: [dblclick, doubletap, longpress, pinch, singletap, swipe, touchend, touchmove, twofingertap]
    
properties:
  - name: className
    summary: Class name for the row. 
    description: |
        A class name represents a unique row layout. 
        
        A table view row must have a unique class name if the row layout is unique. However, 
        use the same name for rows that have the same structural layout (even if the content is 
        different) to provide maximum rendering performance.

        For example, if some rows include images and some rows do not, you would have two class
        names, one for image rows and one for plain rows.
        
        This property exists on Mobile Web, but is ignored.
    type: String
    
  - name: color
    summary: Default text color of the row when not selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. 
        
        On Android, `selectedColor` is not supported, so the text is always displayed in this color.
    type: String
    
  - name: editable
    summary: Determines whether this row can be deleted when the table is in edit mode.
    type: Boolean
    platforms: [iphone, ipad]
    default: true
    
  - name: font
    summary: Font to use for the row title.
    description: |
        If the table uses different fonts on different rows, the font properites may become 
        associated with the wrong row as the table scrolls. This is a known issue.

        As this property is Android-only, adding a [Label](Titanium.UI.Label) to a table view row 
        is a more portable and versatile alternative to using this property.
    type: Font
    default: System default font.
    platforms: [android]
    
  - name: hasCheck
    summary: Render a system-provided check mark in the right image area of the row.
    type: Boolean
    default: false
    
  - name: hasChild
    summary: Render a system provided arrow in the right image area of the row.
    description: |
        The `hasChild` flag is used to indicate to the user that clicking on the row displays more 
        detailed information.  
        
        On iOS, this is specifically used when clicking on the row navigates to the next table view 
        in a heirarchy of table views.
    type: Boolean
    default: false
    
  - name: hasDetail
    summary: Render a system-provided detail disclosure button in the right image area of the row.
    description: |
        The `hasDetail` flag is used to indicate to the user that more details are
        available on the row.  
        
        Specifically on iOS the detail disclosure button indicates that clicking on the row results 
        in a detail view of that item. 

        The `detail` property in the click event is set to `true` if the click occurred on
        the detail button itself, `false` if the click occurs anywhere else in the row.
        
        For rows that have `hasDetail` set to false, the `detail` flag is always `false`.
    type: Boolean
    default: false
    platforms: [iphone,ipad]
    
  - name: indentionLevel
    summary: Indention level for the row.
    description: Indentation values greater than 0 indent the row text.
    type: Number
    default: 0
    platforms: [iphone, ipad]
    
  - name: leftImage
    summary: Image to render in the left image area of the row, specified as a local path or URL.
    type: String
    
  - name: rightImage
    summary: Image to render in the right image area of the row, specified as a local path or URL.
    type: String
    
  - name: selectedBackgroundColor
    summary: Background color to render when the row is selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: String
    
  - name: selectedBackgroundImage
    summary: Background image to render when the row is selected.
    type: String
    
  - name: selectedColor
    summary: Color of the row text when the row is selected, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>. 
    type: String
    platforms: [iphone,ipad]
    
  - name: selectionStyle
    summary: Selection style constant to control the selection color. 
    description: |
        Specify one of the constants from <Titanium.UI.iPhone.TableViewCellSelectionStyle>.
    type: Number
    platforms: [iphone,ipad]
    
  - name: title
    summary: Text to display on the row. 
    description: Do not specify if using views as children of the row.
    type: String

events:
  - name: click
    summary: Fired when a table row is clicked by the user.
    platforms: [android, iphone, ipad, mobileweb]
    properties:
      - name: index
        summary: Row index.
        type: Number
        
      - name: section
        summary: Table view section object, if the clicked row is contained in a section.
        type: Titanium.UI.TableViewSection
        
      - name: detail
        summary: Boolean to indicate if the detail button was clicked. Only `true` if 
            `row.hasDetail` is `true` and the detail button was clicked.
        type: Boolean
        
      - name: searchMode
        summary: Boolean to indicate if the table is in search mode.
        type: Boolean
        
      - name: rowData
        summary: Dictionary containing the properties set on the row.
        type: Dictionary<Titanium.UI.TableViewRow>
        
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
        
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
        
      - name: row
        summary: Table view row object.
        type: Titanium.UI.TableViewRow
    
  - name: touchcancel
    summary: Fired when a touch gesture is interrupted by the device.
    description: |
        Generated in various circumstances, including an incoming call to allow the UI to clean 
        up state.
    platforms: [iphone, ipad, mobileweb]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
        
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
        
  - name: touchend
    summary: Fired when a touch gesture is complete.
    platforms: [iphone, ipad, mobileweb]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
        
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
        
  - name: touchstart
    summary: Fired as soon as the device detects a touch gesture against this view.
    platforms: [iphone, ipad, mobileweb]
    properties:
      - name: x
        summary: X coordinate of the event from the `source` view's coordinate system.
        type: Number
        
      - name: y
        summary: Y coordinate of the event from the `source` view's coordinate system.
        type: Number
    

examples:
  - title: Simple Table View Row example
    example: |
        In this simple example, we create a table view row with a red square in the cell.
        
            var row = Titanium.UI.createTableViewRow();
            var view = Titanium.UI.createView({backgroundColor:'red',width:20,height:20});
            row.height = 'auto';
            row.add(view);
        
        
